@model Hunter.Entities.Form
@{
    this.Model.Fields = this.Model.Fields ?? new List<Hunter.Entities.Form.Field>();
}
@section Styles
{
    <environment include="Development">
        <link rel="stylesheet" href="~/Libraries/bootstrap-table/1.11.1/bootstrap-table.css" />
    </environment>
    <environment exclude="Development">
        <link rel="stylesheet" href="~/Libraries/bootstrap-table/1.11.1/bootstrap-table.min.css" />
    </environment>
}

<div style="padding: 0px 2em;">
    <div style="display: none;" id="panel-edit">
        <table class="table">
            <tr>
                <td style="width: 100px">
                    <label for="name">序号</label>
                </td>
                <td>
                    <input type="number" class="form-control" name="sequence" />
                </td>
            </tr>
            <tr>
                <td style="width: 100px">
                    <label for="name">字段名称</label>
                </td>
                <td>
                    <select class="form-control" name="field">
                    @foreach(var item in this.Model.Fields)
                    {
                        <option value="@item.Name">@item.Name</option>
                    }
                    </select>
                </td>
            </tr>
            <tr>
                <td>
                    <label for="name">宽度</label>
                </td>
                <td>
                    <input type="text" class="form-control" name="width" />
                </td>
            </tr>
            <tr>
                <td>
                    <label for="name">水平居中</label>
                </td>
                <td>
                    <select class="form-control" name="align">
                        <option value="left">左</option>
                        <option value="center" selected="selected">居中</option>
                        <option value="right">右</option>
                    </select>
                </td>
            </tr>
            <tr>
                <td>
                    <label for="name">垂直居中</label>
                </td>
                <td>
                    <select class="form-control" name="valign">
                        <option value="top">上</option>
                        <option value="middle" selected="selected">中间</option>
                        <option value="bottom">下</option>
                    </select>
                </td>
            </tr>
        </table>
    </div>
    <div id="toolbar" class="btn-group">
        <button id="btn-insert" type="button" class="btn btn-default">
            <span class="glyphicon glyphicon-plus" aria-hidden="true"></span>
            <span>新增</span>
        </button>
        <button id="btn-update" type="button" class="btn btn-default">
            <span class="glyphicon glyphicon-pencil" aria-hidden="true"></span>
            <span>修改</span>
        </button>
        <button id="btn-delete" type="button" class="btn btn-default">
            <span class="glyphicon glyphicon-remove" aria-hidden="true"></span>
            <span>删除</span>
        </button>
        <button id="btn-save" type="button" class="btn btn-default">
            <span class="glyphicon glyphicon-save-file" aria-hidden="true"></span>
            <span>保存</span>
        </button>
        <span id="lbl-state" style="margin: auto 10px;"></span>
    </div>
    <table id="table"></table>
</div>
<div style="display:none;" id="initialize-data">@this.Json.Serialize(this.Model.Columns)</div>

@section Scripts
{
    <environment include="Development">
        <script src="~/Libraries/bootstrap-table/1.11.1/bootstrap-table.js"></script>
    </environment>
    <environment exclude="Development">
        <script src="~/Libraries/bootstrap-table/1.11.1/bootstrap-table.min.js"></script>
    </environment>
    <script>
        var getInitializeData = function () {
            try {
                var result = JSON.parse($('#initialize-data').text())
                if (result)
                    return result;
                return [];
            } catch (e) {
                return []
            }
        }

        $(function () {
            var options = $.extend($.BootstrapTable.DEFAULT, {
                url: null,
                data: getInitializeData(),
                sidePagination: 'client',
                columns: [
                    { checkbox: true },
                    { halign: 'center', field: 'sequence', title: '序号', width: '60px' },
                    { halign: 'center', field: 'field', title: '字段名称' },
                    { halign: 'center', field: 'width', title: '宽度', width: '100px' }
                ]
            })
            var $table = $('#table').bootstrapTable(options);
            var getItem = function (field, timespan) {
                for (var i = 0, length = options.data.length; i < length; i++) {
                    var value = options.data[i];
                    if (value.field == field && value.timespan != timespan)
                        return { index: i, value: value }
                }
                return { index: -1, value: null };
            }
            var upgradeData = function (obj) {
                var insert = true;
                var array = [];
                for (var i = 0, length = options.data.length; i < length; i++) {
                    var value = options.data[i];
                    if (value.timespan == obj.timespan) { // update
                        insert = false;
                        var temp = getItem(value.field, value.timespan)
                        if (temp.index >= 0) {
                            window.top.layer.msg('字段名称已经存在')
                            return false
                        } else {
                            array.push(obj)
                        }
                    } else {
                        array.push(value)
                    }
                }
                if (insert) {
                    var temp = getItem(obj.field, obj.timespan)
                    if (temp.index >= 0) {
                        window.top.layer.msg('字段名称已经存在')
                        return false
                    } else {
                        array.push(obj)
                    }
                }
                refreshData(array)
                setState(2)
                return true
            }
            var setState = function (flag) {
                var $lblState = $('#lbl-state');
                $lblState.removeClass('text-success').removeClass('text-warning')
                if (flag == 1)
                    $lblState.addClass('text-success').text('已保存')
                else if (flag == 2)
                    $lblState.addClass('text-warning').text('未保存')
            }
            var refreshData = function (array) {
                options.data = array.sort(function (a, b) {
                    return window.tryParseFloat(a.sequence, 0) - window.tryParseFloat(b.sequence, 0)
                });
                $table.bootstrapTable('destroy').bootstrapTable(options)
                $(window).resize()
            }

			$(window).resize(function () {
				$table.bootstrapTable('resetView', { height: $('body').height() });
            }).resize()
            var edit = function (obj) {
                var update = obj.field
				window.top.layer.open({
					type: 1,
					title: '编辑',
					maxmin: false, //开启最大化最小化按钮
                    area: ['80%', '80%'],
                    content: $('#panel-edit').html(),
                    btn: ['确定'],
                    success: function (layero, index) {
                        layero.fillData(obj)
                    },
                    yes: function (index, layero) {
                        var o = layero.serializeData();
                        o.title = o.field
                        o.halign = 'center'
                        if (obj.timespan)
                            o.timespan = obj.timespan
                        else
                            o.timespan = new Date().valueOf()
                        if (upgradeData(o))
                            window.top.layer.close(index)
                    }
				})
			}
            $('#btn-insert').click(function () {
                edit({})
			})
			$('#btn-update').click(function () {
				var selections = $table.bootstrapTable('getSelections');
				if (selections.length == 0) {
					window.top.layer.msg('请选择', { icon: 0 });
				} else {
					edit(selections[0])
				}
            })
            $('#btn-delete').click(function () {
                var array = []
                var selections = $table.bootstrapTable('getSelections');
                if (selections.length == 0) {
                    window.top.layer.msg('请选择', { icon: 0 });
                    return
                } 
                for (var i = 0; i < options.data.length; i++) {
                    var d = options.data[i]
                    var contain = false
                    for (var j = 0; j < selections.length; j++) {
                        var s = selections[j]
                        if (s.timespan == d.timespan) {
                            contain = true;
                            break;
                        }
                    }
                    if (contain == false) {
                        array.push(d)
                    }
                }
                refreshData(array)
                setState(2)
            })
            $('#btn-save').click(function () {
                $.ajax({
                    url: '@this.Url.Action("SaveColumns", new { id = this.Model.ID })',
                    type: 'post',
                    contentType: 'application/json',
                    data: JSON.stringify(options.data),
                    success: function () {
                        window.top.layer.msg('保存成功')
                        setState(1)
                    }
                })
            })
		})
    </script>
}
